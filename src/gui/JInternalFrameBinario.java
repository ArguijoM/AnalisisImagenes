/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import espacial.Histograma;
import herramientas.umbral;
import java.awt.Color;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;

/**
 *
 * @author working
 */
public class JInternalFrameBinario extends javax.swing.JInternalFrame {
    private JInternalFrameImagen internal;
    private Image imagenOriginal;
    /**
     * Creates new form JInternalFrameBinario
     */
    public JInternalFrameBinario(JInternalFrameImagen internal) {
        
        this.internal = internal;
        initComponents();
       
        this.imagenOriginal = herramientas.HerramientasImagen.copiarImagen(internal.getImagenOriginal());
        setClosable(true);
        this.jButton1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
//                umbral u = new umbral(imagenOriginal);
//                Image nueva = u.getImgSeg();
//                System.out.println("Umbral: "+u.getUmbral());
//                internal.setImagen(nueva);
                
                int u = jSlider1.getValue();
                System.out.println("Valor de U: "+u);
                internal.setImagen(herramientas.HerramientasImagen.binarizacion(imagenOriginal, u)); 
            }
        });
        jButtonISODATA.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                BufferedImage b =herramientas.HerramientasImagen.grises(herramientas.HerramientasImagen.toBufferedImage(imagenOriginal));
                Histograma h = new Histograma(herramientas.HerramientasImagen.toImage(b));
                h.calcularHistogramas();
                int umbral1 = espacial.UmbralAutomatico.metodoIterativo(h.getR());
                
                internal.setImagen(herramientas.HerramientasImagen.binarizacion(imagenOriginal, umbral1));
                System.out.println("Umbral método ISODATA: "+umbral1);
                
            }
        });
        
        jButtonOTSU.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                BufferedImage b =herramientas.HerramientasImagen.grises(herramientas.HerramientasImagen.toBufferedImage(imagenOriginal));
                Histograma h = new Histograma(herramientas.HerramientasImagen.toImage(b));
                h.calcularHistogramas();
                int umbral2 = espacial.UmbralAutomatico.otsu(h.getR());
                
                internal.setImagen(herramientas.HerramientasImagen.binarizacion(imagenOriginal, umbral2));
                System.out.println("Umbral método OTSU: "+umbral2);
            }
        });
        
    }

    public void setClosable(boolean closable) {
        this.closable = closable;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSlider1 = new javax.swing.JSlider();
        jButton1 = new javax.swing.JButton();
        jButtonISODATA = new javax.swing.JButton();
        jButtonOTSU = new javax.swing.JButton();

        setTitle("Imagen Binarizada");

        jSlider1.setMajorTickSpacing(10);
        jSlider1.setMaximum(255);
        jSlider1.setPaintLabels(true);
        jSlider1.setPaintTicks(true);
        jSlider1.setValue(15);

        jButton1.setText("Convertir");

        jButtonISODATA.setText("ISODATA");

        jButtonOTSU.setText("OTSU");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, 701, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonISODATA, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonOTSU, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButtonISODATA)
                .addGap(18, 18, 18)
                .addComponent(jButtonOTSU)
                .addGap(0, 20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonISODATA;
    private javax.swing.JButton jButtonOTSU;
    private javax.swing.JSlider jSlider1;
    // End of variables declaration//GEN-END:variables
}
