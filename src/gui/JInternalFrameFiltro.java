/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Color;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;

/**
 *
 * @author Manuel
 */
public class JInternalFrameFiltro extends javax.swing.JInternalFrame {

    /**
     * Creates new form JInternalFrameFiltro
     */
    private JInternalFrameImagen internal;
    public JInternalFrameFiltro(JInternalFrameImagen internal) {
        this.internal = internal;
        initComponents();
        
        this.jButtonGrises.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                
                BufferedImage bi = herramientas.HerramientasImagen.toBufferedImage(internal.getImagenOriginal());
                for (int x=0;x < bi.getWidth();x++){
                    for (int y=0;y < bi.getHeight();y++){
                        //Obtiene el color
                        Color c1=new Color(bi.getRGB(x, y));
                        //Calcula la media de tonalidades
                        int med=(c1.getRed()+c1.getGreen()+c1.getBlue())/3;
                        //Almacena el color en la imagen destino
                        bi.setRGB(x, y, new Color(med,med,med).getRGB());
                    }
                }
                Image nueva = herramientas.HerramientasImagen.toImage(bi);
                internal.setImagen(nueva);
            }
        });
        
        this.jButtonBN.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                BufferedImage bi = herramientas.HerramientasImagen.toBufferedImage(internal.getImagenOriginal());
                for (int x=0;x < bi.getWidth();x++){
                    for (int y=0;y < bi.getHeight();y++){
                        //Obtiene el color
                        Color c1=new Color(bi.getRGB(x, y));
                        //Calcula la media de tonalidades
                        int med=(c1.getRed()+c1.getGreen()+c1.getBlue());
                        if(med>=382){
                            //Almacena el color en la imagen destino
                            bi.setRGB(x, y, Color.WHITE.getRGB());
                        }else{
                            bi.setRGB(x, y, 0);
                        }
                        
                    }
                }
                Image nueva = herramientas.HerramientasImagen.toImage(bi);
                internal.setImagen(nueva);
            }
        });
        
        this.jButtonNeg.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                BufferedImage bi = herramientas.HerramientasImagen.toBufferedImage(internal.getImagenOriginal());
                for (int x=0;x < bi.getWidth();x++){
                    for (int y=0;y < bi.getHeight();y++){
                        //Obtiene el color
                        Color c1=new Color(bi.getRGB(x, y));
                        int r=c1.getRed();
                        int g=c1.getGreen();
                        int b=c1.getBlue();

                        //Calculamos el complemento de cada color
                        bi.setRGB(x, y, new Color(255-r,255-g,255-b).getRGB());
                    }
                }
                Image nueva2 = herramientas.HerramientasImagen.toImage(bi);
                internal.setImagen(nueva2);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonGrises = new javax.swing.JButton();
        jButtonNeg = new javax.swing.JButton();
        jButtonBN = new javax.swing.JButton();

        jButtonGrises.setText("Tono de grises");

        jButtonNeg.setText("Negativo");

        jButtonBN.setText("Blanco y negro");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonGrises, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                    .addComponent(jButtonNeg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonBN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonGrises)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonNeg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonBN)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBN;
    private javax.swing.JButton jButtonGrises;
    private javax.swing.JButton jButtonNeg;
    // End of variables declaration//GEN-END:variables
}
